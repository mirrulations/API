name: GitHub Actions AWS connection
run-name: ${{ github.actor }} triggered the Github actions
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deployment-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      
      - name: Check AWS credentials
        run: |
          if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" || -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            echo "AWS credentials are missing. Skipping AWS-related steps."
            echo "AWS_CREDENTIALS_PRESENT=false" >> $GITHUB_ENV
          else
            echo "AWS_CREDENTIALS_PRESENT=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Configure AWS credentials
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Test AWS CLI connectivity
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        run: |
          echo "Your ARN is: $(aws sts get-caller-identity --query Arn --output text)"

      - name: Wait for stack to be ready
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        run: |
          stack_name="api-dev"
          allowed_statuses=("CREATE_COMPLETE" "UPDATE_COMPLETE" "ROLLBACK_COMPLETE" "UPDATE_ROLLBACK_COMPLETE")
          max_wait=600
          wait_interval=30
          elapsed=0
          echo "Stack status: $(aws cloudformation describe-stacks --stack-name "$stack_name" --query 'Stacks[0].StackStatus')"          
          while [ $elapsed -lt $max_wait ]; do
            status=$(aws cloudformation describe-stacks --stack-name "$stack_name" --query 'Stacks[0].StackStatus' --output text 2>/dev/null)
            if [ $? -ne 0 ] || [[ " ${allowed_statuses[@]} " =~ " ${status} " ]]; then
              echo "Stack is ready or doesn't exist. Proceeding with deployment."
              break
            fi
            echo "Stack is not ready for update. Current status: $status. Waiting..."
            sleep $wait_interval
            elapsed=$((elapsed + wait_interval))
          done
          if [ $elapsed -ge $max_wait ]; then
            echo "Timeout waiting for stack to be ready after $max_wait seconds."
            exit 1
          fi

      - name: Deploy with SAM
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        run: |
          sam deploy --config-file samconfig.toml --config-env default --resolve-s3 --no-confirm-changeset --no-fail-on-empty-changeset
      - run: echo "This job's status is ${{ job.status }}."
